to install java on ur system--download jdk latest version that is LTS and VS CODE for editor now in cmd::
java --version for java version
javac   for java compiler version

java--popular lang
james gosling and team (sun microsystems)

now is owned by oracle
download jdk version that is LTS(Long Time Support)

jdk has jre(jvm+ libraries)

u write code in java(.java)--using compiler u convert into byte code(javac converts .java to .class file)
this byte code or .class file is given to JVM/JRE and it executes/runs our code

java is platform independent-- it means the same code works in all OS , all hardware

java feature--WRITE ONCE READ ANYWHERE(COMPILE ONCE, U CAN EXECUTE IT ANYWHERE)

jshell in cmd
u willget an interactive java console 

//first program
java is OOP so declare a class

// EXECUTION STARTS FROM main
//EVERY LINE(NOT BLOCK) has to end with ;

class Hello
{
    public static void main(String a[])
    {
        System.out.print("HI");   //STANDARD STATEMENT TO PRINT ANYTHING
    }
}

//to store variables--data types
         datatypes
         ||||||
   primitive
   1.int(short,int long,byte) byte(from -2^7 to 2^7-1)
   2.float(double,float)---by default in java double, to use float explicitly u have to mention float x=2.3f;
   3.char--2 bytes(in c, cpp char has 1 Byte)--as java supports unicode not ascii only char c='K'; //SNGLE QUOTES ONLY
   4.Boolean(True/False)  not 1/0 

---MEMORY----
//stack--LIFO --IT STORES IN AN OIRDE
//HEAP--EXPANDS BASED ON SPACE
//Method variables like main and add func--gets stored in stack memory each method withbits own stack--local variables

//methods inside class, but outside method--stored in HEAP--instance variables

//reference variable is also stored in heap--it has an address in heap, it contains instance variables and method names..
//thats why it can be  accessed multple times..
//refernce varaible stores address in main stack, so there is an adress link

//if u change obj.num value, it wont affect other obj value..as they r two diff addresses

//need of an array
to store variables of similar data type without having to declare multiple variables 
declaration: int arr[]={1,2,3,4};//size and values are known--should always stick to size 
//for creating an array:
int arr[]=new int[4];

//naming convention-- for better readability and understanding

camel casing

class(Stud), interfaces(Runnable)--starts with Capital Letter
variable and method - marks, show()---small letters
constants --- PIE all caps
if multiple words are there---camel casing---first letter of every word is--caps like ShowMyMarks

//other languages--snake casing show_my_marks

//for every class in our code--it creates .class file//after compilation

//polymorphism--ability to show multiple forms/behaviour

--twoi tyopes

compile time(if the behaviour is defined in compie time)--method ove loading
Run time--method over riding